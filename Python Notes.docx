
                                              Chapter 1

# letter A to Z And a to z
# Digit 0 to 9
# Special Symbols -+*/ etc
# (a**b) means b is the power of a.
# WhiteSpaces  Blank Space , tab, carriage return , newLine , formfeed
# Other characters  - Python can process  all Ascii  and Unicode character  as part of data or literal
# Python is case sensitive language.
# Python is implicit language.

Variable  :- A Variable is a name  given to a memory  location in a program.
 Example :- name = "Abhishek"

Rules For Identifies
1. Identifies can be a combination of  uppercase and lowercase  letter , digits or an (_) underscore
    so myVariable, Variable_1, etc all are valid  Python Identifies.

2. An Identifies can not start with digits 
    so Variable1 is valid but 1variable is not valid.

3. We can not use special symbols like ! # @ % &.

4. Identifies can be of any length.

Data Types

1. Integer

2. String   (can be writen in 3 types ("Abhishek"),('Abhishek'),(''' Abhishek'''))

3. Float

4. Boolean   (True And False )

5. None    (It represent a Variable who did't have any value stored )

Keywords :-  Words which are reserved in Python.

{
    and    else     in        return
    as     except   is         True
  assert   Finally  lambda      try
  break    False    nonlocal    with
  class    for      None        while
continue   from      not         yeild
def        global    or         del
if         pass     elif        import
raise 
}

Types of Tokens

Punctuators :- These are the symbols to organize sentence structure in programming.
Example :- (),{},@,[],#,-=,+=,/=,*=,//=,= etc.


Operator precedence 

1. Parentheses{}
    {}

2. Exponentiation 
    **       

3. Bitwise nor
    ~x

4. Positive , negative (unary +,-)
    +x,-x

5. Multiplication, Division, Floor Division ,Remainder
    *,/,//,%

6. Addition, Subtraction 
    +,-

7. Bitwise and
    &

8.  Bitwise XOR
    ^

9.  Bitwise OR
    |

10. Comparisons(Relational Operators), identity Operators
    <,<=,>,>=,<>,!=,==,is,isnot

11. Logical Operators

     Boolean not  (convert True into False or False into True)
     Boolean and  (And says one value should be false will be False)
     Boolean Or   (Or says one value should be True answer will be True)


Rules of AND and Or

AND                               OR
T T =T                         T T = T
F T =F                         T F = T 
T F = F                        F T = T
F F = F                        F F = F
Expression Execution 

Example:-

A,B= 2,3
Txt ="@"
print(2*Txt*3)  # Here when ever number is getting multiple with string it will repeat n number of time (n depends upto the number by which string is multipling).


A,B="2",3
Txt ="@"
print((A+Txt)*B)   #  Here two Strings are adding with the help of + sign and repeat but multipling with B.

A,B=2,3
C=4
print(A+B*C)  #  Here first multiple done first then addition will take place.



A,B= 10,5.0
C =A*B
print(C)  # A Expression with Integer and Float it will all always return Float.


A,B=1,2
C=A/B
print(C)   # Division of two Integer always return a flaot value.


A,B = 1.5,3
C= A //B  # (To get round of value after the division) && (Here first the value of division comes into Integer and then convert intp flaot).
print(C,A/B) #  (Here in second Expression answer directly convert into float value).

floor :- It will give the closest Integer, which  is lesser  than or equal to floor value.
    Result of (A//B) is same as  floor(A/B).

A,B=12,5
C = A//B
print(C) 

Output 
2

A,B=-12,5
C=A//B
print(C)

Output
-3

A,B=12,-5
C=A//B
print(C)

Output
-3


Remainder is negative when denominator is negative

A,B=5,-2
C=A%B
print(C)

Output
-1


Comments in Python :- Means lines which compiler is going to ignore .

 # single Line Comments.

 """  This is a multi -line  Comment """



input() statement is use to get input from user.

Example :-

string input
name=input("name : ")

int input
age = int(input("age : "))

float input
price = float(input("price :"))


Conditional statement :- Statements which have Condition are called Conditional statement.
we can write Condition statement in 3 forms :-

1. if elif else
2. if 
3. if elif

 Python support  indentation .
 syntax :-
 if(Condition):
    Statement 1
elif(Condition):
    Statement 2
else:
    Statement 3

Example 1 :-

age = int(input("Enter your Age "))
if(age>=18):
    print("You are Eligible")
else:
    print("You are not Eligible")

Example 2 :-

light =input("Enter the color of light ")
if(light == "red"):
    print("Stop")
elif(light =="Yellow"):
    print("Look")
elif(light == "Green"):
    print("Go")
else:
    print("Incorrect Light Color")

Ternary Operator 

Syntax 1 :-

<var>= <var1>if<condition>else<var2>

Example :-

    Food = input("Enter any food name ")
    eat = "Yes"if Food== "cake" else "No"


Syntax 2 :-

<Statement1>if<condition>else<Statement>

Example :-

Food = input("Enter Any Food name ")
print("Yes")if Food == "cake" or Food == "Paties" else print("No")


Syntax 3 :-

<var> = (False_var, True_val)[<Condition>]

age = int(input("Enter your age"))
vote = ("No","Yes")[age<18]
print(vote)


Type Conversion

It is done by interprater automatically .

Example :-

a =2 
b= 2.34
sum = a+b   (Here integer automatically convert integer into float because float is higher in compare to integer).


a = "2"
b= 2.34
sum = a+b  (here error comes because String will not add into float value)

To overcome the above error we can do this :-

a = int("2")
b =10
sum = a+b
print(type(a))
print(sum)


                                            Chapter 2


String :-  It is a data type that stores a sequence of characters.

    Syntax :-
        str1 ="Abhishek"
        str1 ='Abhishek'
        str1 = """Abhishek"""

Escape sequence character :-  It means special character which are use to format the text .
        1. \n :- use to get nextline in program.
        2. \t :- use to get tab space in a line .

Basic Operation :-

1. Concatenation
    Example :-
            "Hello"+"World"="HelloWorld"

2. length of str
    Example :- 
            len(str)
        
3. Indexing 
    Example :-
          str1 = A,B,H,I,S,H,E,K 
          index  0 1 2 3 4 5 6 7

4. Slicing
    Example :-
           str[starting_idx : ending_idx]  endinn_index is not include.
           str = "Abhishek"
           print(str[1:7]) 

           str = "Abhishek"
           print(str[:8])

           str ="Abhishek"
           print(str[0:])

           str = "APPLE"
           print(str[-3:-1])

Basic functions of String 

1. endwith
    syntax :-
            str.endwith("er.") return true if string ends with given substring else false.

2. capitalize 
    syntax :- 
            str.capitalize()  convert lowercase to uppercase only first character

3. replace 
    syntax :-
            str.replace(old_value , new_value)  replace all old values with new values.

4. find
    syntax :-
            str.find("word to find")  this will find the word in String and return the first index of that word.

5. count
    syntax :-
            str.count() this will find the number of occurance of word in a String.


                                                    Chapter 3

Lists in Python
    A build in data type that stores set of values.
    It can store element of different type (integer, float , string).
    We can store different type of data together in lists.
    Strings are immutable
    lists are mutable 
    Example :-
           marks= [23,45,67,89,"Abhishek"]
           print(len(marks))
           marks[0]="abhi"
           print(marks)

List Slicing
    syntax :-
            list_name[starting_idx:ending_idx] ending_idx is not included
        Example :-
            marks = [85,94,63,48]
            print(marks[1:4])

Lists methods 

1. append :-  add one element at last 
    syntax :-
        list = [1,2,3,4]
        print(list.append(4))

2. sort :- sorting the list in ascending / descending order.
        syntax :- 
            list = [2,5,6,1,3]
            list.sort()
            print(list)
            
            Descending

            list.sort(reverse=True)
            print(list)

3. reverse  :- to reverse the list [This is not sorting ].
        syntax :-
            list =[1,2,3,4,5,6]
            list.reverse()
            print(list)
        
4. insert :- add element on particular index.
        syntax :-
        list = [1,2,4,5,6]
        list.insert(2,3)
        print(list)

5. remove :- to remove element first occurance.
        Syntax :-
            list = [1,32,1,2]
            list.remove(1)
            print(list)

6. pop :- to remove the element from particular index
        Syntax :-
            list =[1,2,3,4,5]
            list.pop(3)
            print(list)


Tuples in Python
            A build data type that let  us create immutable sequenceof values.
            Syntax :-
                    tup = (1,2,3,4,5)
                    print(tup)
                    print(tup[1])

                    tup=()
                    print(tup)

                    tup =(1,)  [To print single element in tuple we use coma ]
                    print(tup)

Slicing in Tuple
            tup = (1,2,3,4,5)
            print(tup[1:2])

Tuple Methods :-

1. Index  :- return the occurance of first index.
        Syntax :-
            tup = (1,2,3,4,5,1,3,4,5,2)
            print(tup.index(1))

2. count :- find the number of occurance or the element in tuple.
        Syntax :-
                tup =(1,2,3,4,5,5,4,3,2,1)
                print(tup.count(2))


                                            Chapter 4

Dictionary in Python

Dictionaries are used to store data values in key :value pairs.
They are unordered , mutable & don't allow duplicate key . 
Only immutable items can be a key .
Al primitive data type and tuple can be key.

Example :-
dict ={
      "name" : "Abhishek",
      "age"  : 22,
      "marks": [56,65,76,]
     }
print(dict)

Nested Dictionaries 

            Example :-
                student ={
                    "name" : "Abhishek",
                    "Subject" : {
                        "english" : 78,
                        "Maths"   : 67,
                        "Economics" : 89,
                    },
                    "age" = 22,
                }

Dictionary Methods

.keys :- return all keys

         student ={
                    "name" : "Abhishek",
                    "Subject" : {
                        "english" : 78,
                        "Maths"   : 67,
                        "Economics" : 89,
                    },
                    "age" = 22,
                }

            print(student.keys())

.values :- return all values.

         student ={
                    "name" : "Abhishek",
                    "Subject" : {
                        "english" : 78,
                        "Maths"   : 67,
                        "Economics" : 89,
                    },
                    "age" = 22,
                }

            print(student.values())

.items  :- return all key value pairs as tuples.

            student ={
                    "name" : "Abhishek",
                    "Subject" : {
                        "english" : 78,
                        "Maths"   : 67,
                        "Economics" : 89,
                    },
                    "age" = 22,
                }

            print(student.items())

.get :- return the key according to thir value 

            
            student ={
                    "name" : "Abhishek",
                    "Subject" : {
                        "english" : 78,
                        "Maths"   : 67,
                        "Economics" : 89,
                    },
                    "age" = 22,
                }

            print(student.get("name"))

.update  :- insert the specified items to the Dictionary

        student ={
                    "name" : "Abhishek",
                    "Subject" : {
                        "english" : 78,
                        "Maths"   : 67,
                        "Economics" : 89,
                    },
                    "age" = 22,
                }

            student.update({"city" : "Delhi"})
            print(student)


